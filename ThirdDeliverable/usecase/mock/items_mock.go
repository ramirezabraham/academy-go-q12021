// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/items.go

// Package mock is a generated GoMock package.
package mock

import (
	model "main/model"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNewItemsUseCase is a mock of NewItemsUseCase interface.
type MockNewItemsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockNewItemsUseCaseMockRecorder
}

// MockNewItemsUseCaseMockRecorder is the mock recorder for MockNewItemsUseCase.
type MockNewItemsUseCaseMockRecorder struct {
	mock *MockNewItemsUseCase
}

// NewMockNewItemsUseCase creates a new mock instance.
func NewMockNewItemsUseCase(ctrl *gomock.Controller) *MockNewItemsUseCase {
	mock := &MockNewItemsUseCase{ctrl: ctrl}
	mock.recorder = &MockNewItemsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewItemsUseCase) EXPECT() *MockNewItemsUseCaseMockRecorder {
	return m.recorder
}

// GetConcurrentlyItems mocks base method.
func (m *MockNewItemsUseCase) GetConcurrentlyItems(typeNumber string, items, itemsPerWorker int) ([]model.Item, *model.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConcurrentlyItems", typeNumber, items, itemsPerWorker)
	ret0, _ := ret[0].([]model.Item)
	ret1, _ := ret[1].(*model.Error)
	return ret0, ret1
}

// GetConcurrentlyItems indicates an expected call of GetConcurrentlyItems.
func (mr *MockNewItemsUseCaseMockRecorder) GetConcurrentlyItems(typeNumber, items, itemsPerWorker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcurrentlyItems", reflect.TypeOf((*MockNewItemsUseCase)(nil).GetConcurrentlyItems), typeNumber, items, itemsPerWorker)
}

// GetItem mocks base method.
func (m *MockNewItemsUseCase) GetItem(itemID string) (model.Item, *model.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", itemID)
	ret0, _ := ret[0].(model.Item)
	ret1, _ := ret[1].(*model.Error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockNewItemsUseCaseMockRecorder) GetItem(itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockNewItemsUseCase)(nil).GetItem), itemID)
}

// GetItems mocks base method.
func (m *MockNewItemsUseCase) GetItems() ([]model.Item, *model.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]model.Item)
	ret1, _ := ret[1].(*model.Error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockNewItemsUseCaseMockRecorder) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockNewItemsUseCase)(nil).GetItems))
}

// GetItemsAPI mocks base method.
func (m *MockNewItemsUseCase) GetItemsAPI(token string, query url.Values) ([]model.ApiItem, *model.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsAPI", token, query)
	ret0, _ := ret[0].([]model.ApiItem)
	ret1, _ := ret[1].(*model.Error)
	return ret0, ret1
}

// GetItemsAPI indicates an expected call of GetItemsAPI.
func (mr *MockNewItemsUseCaseMockRecorder) GetItemsAPI(token, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsAPI", reflect.TypeOf((*MockNewItemsUseCase)(nil).GetItemsAPI), token, query)
}

// GetToken mocks base method.
func (m *MockNewItemsUseCase) GetToken() (model.Token, *model.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(model.Token)
	ret1, _ := ret[1].(*model.Error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockNewItemsUseCaseMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockNewItemsUseCase)(nil).GetToken))
}
